// Generated by CoffeeScript 1.6.3
(function() {
  var racksjs, sleep, targeLabel,
    _this = this;

  racksjs = require('./racks.js');

  sleep = require('sleep');

  targeLabel = 'glusterfs-node';

  new racksjs({
    username: process.argv[2],
    apiKey: process.argv[3],
    verbosity: 3,
    cache: false
  }, function(rs) {
    var deleteNetworks, deleteServers, deleteVolumes;
    rs.datacenter = 'IAD';
    deleteServers = function(cb) {
      var servercount;
      servercount = 0;
      return rs.servers.all(function(servers) {
        var server, _i, _len, _results;
        if (servers.length > 0) {
          _results = [];
          for (_i = 0, _len = servers.length; _i < _len; _i++) {
            server = servers[_i];
            _results.push(server.metadata(function(metadata) {
              if (metadata.metadata.label === 'glusterfs-node') {
                console.log('deleteing server:', server.name);
                servercount++;
                return server["delete"](function(reply) {
                  console.log(reply);
                  if (--servercount === 0) {
                    console.log('deleteserver calling back');
                    return cb();
                  }
                });
              } else {
                return console.log('skipping server:', server.name);
              }
            }));
          }
          return _results;
        } else {
          console.log('no servers found');
          return cb();
        }
      });
    };
    deleteVolumes = function(cb) {
      var volumecount;
      volumecount = 0;
      return rs.cloudBlockStorage.volumes.all(function(volumes) {
        var volume, _i, _len, _results;
        if (volumes.length > 0) {
          _results = [];
          for (_i = 0, _len = volumes.length; _i < _len; _i++) {
            volume = volumes[_i];
            volumecount++;
            _results.push(volume["delete"](function(reply) {
              console.log(reply);
              if (--volumecount === 0) {
                console.log('deleteVolumes calling back');
                return cb();
              }
            }));
          }
          return _results;
        } else {
          console.log('no volumes found');
          return cb();
        }
      });
    };
    deleteNetworks = function(cb) {
      var netcount;
      netcount = 0;
      return rs.cloudServersOpenStack.networks.all(function(networks) {
        var network, _i, _len, _results;
        if (networks.length > 2) {
          _results = [];
          for (_i = 0, _len = networks.length; _i < _len; _i++) {
            network = networks[_i];
            netcount++;
            if (network.id !== '00000000-0000-0000-0000-000000000000' && network.id !== '11111111-1111-1111-1111-111111111111') {
              _results.push(network["delete"](function(reply) {
                console.log(reply);
                if (--netcount === 0) {
                  console.log('deleteNetworks calling back');
                  return cb();
                }
              }));
            } else {
              _results.push(void 0);
            }
          }
          return _results;
        } else {
          console.log('no networks found');
          return cb();
        }
      });
    };
    return deleteServers(function() {
      sleep.sleep(10);
      return deleteVolumes(function() {
        sleep.sleep(10);
        return deleteNetworks(function() {
          sleep.sleep(10);
          return console.log('fin');
        });
      });
    });
  });

}).call(this);
